DOING:
+ Proper asset import: model class, model factory
+ Tiled rendering, in prep for clustered rendering.

TO-DO:
+ Clear render targets, should check that the resources are in write state
+ Checking for descriptor re-use!
+ Maybe have a Metadata system from CB and SB (annoying to set all the properties when binding >_>)
+ Timing events (for pix)
+ Auto magic PSO without setting render target and depth formats..
+ Make constant buffer binding more clever, as in, if we donÂ´t change a slot ,do not trash it...
+ Console to display logs
+ Make pools for every type of resource
+ Check proper resizing..
+ Replace rand with something better (spherical distribution)
+ Combine dx12 texture creation code
+ Static shape builder class (screen quad, screen triangle, cubes spheres etc etc)
+ Implement gradient noise	
+ Precompile shaders offline
+ Add curl noise
+ Begin end compute pipeline?
+ Profiler
+ Finish input for ImGUI
+ Clustered renderer.

DONE:
+ Batch barriers
+ Create light actor
+ Structured buffers
+ Constant buffer in one file (as in dont have the declaration in cpp and hlsl) use some #define trickery to do it. (check render doc hlsl_cbuffers.h)
+ Frustum culling
+ Debug camera that we can eject
+ Draw debug meshes
+ Start making components (nah, I will have a base Actor, and inherit from item, keeping it simple)
+ Unify mesh transform (inv view proj)
+ Unify shaders.
+ Scene graph system
+ Proper logging system. Would be nice to have a macro.
+ Add worley noise
+ Clouds to compute shader
+ Entry point system
+ App Base system

BRAINSTORM:

To render something, you have
+ Source mesh (.fbx, .obj, procedural, binary). This is just a set of vertex data!
+ Material, a shader, this material will reference some textures.
+ Transformation, where should we render, scale, rotation!

A model can have many meshes!





Cube vtx buffer:
	VertexCube arr[36] =
	{
		-1.0f, 1.0f, 1.0f,  1.0f, 1.0f, 1.0f,  1.0f,-1.0f, 1.0f,    // Front
		-1.0f, 1.0f, 1.0f,  1.0f,-1.0f, 1.0f, -1.0f,-1.0f, 1.0f,

		-1.0f, 1.0f, 1.0f, -1.0f, 1.0f, -1.0f,  1.0f, 1.0f, -1.0f,  // Top
		-1.0f, 1.0f, 1.0f,  1.0f, 1.0f, -1.0f,  1.0f, 1.0f,  1.0f,

		-1.0f,-1.0f, 1.0f,   1.0f,-1.0f,1.0f,   -1.0f,-1.0f,-1.0f,  // Bot
		 1.0f, -1.0f, 1.0f,  1.0f,-1.0f,-1.0f,  -1.0f,-1.0f,-1.0f,

		1.0f, 1.0f,-1.0f, -1.0f, 1.0f,-1.0f,   -1.0f,-1.0f,-1.0f,    // Back
		1.0f, 1.0f,-1.0f,  -1.0f,-1.0f, -1.0f,  1.0f,-1.0f,-1.0f,

		1.0f, 1.0f, 1.0f,  1.0f, 1.0f,-1.0f,  1.0f,-1.0f,-1.0f, // Right
		1.0f, 1.0f, 1.0f,  1.0f,-1.0f,-1.0f,  1.0f,-1.0f, 1.0f, 

		-1.0f, 1.0f,-1.0f,  -1.0f, 1.0f,1.0f,  -1.0f,-1.0f,1.0f, // Left
		-1.0f, 1.0f,-1.0f,  -1.0f,-1.0f,1.0f,  -1.0f,-1.0f,-1.0f
	};
